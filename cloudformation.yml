AWSTemplateFormatVersion: 2010-09-09
Resources:
  CloudMap:
    Properties:
      Description: Service Map for Docker Compose project ctwp
      Name: ctwp.local
      Vpc: vpc-bdf410d6
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
  Cluster:
    Properties:
      ClusterName: ctwp
      Tags:
      - Key: com.docker.compose.project
        Value: ctwp
    Type: AWS::ECS::Cluster
  CtwpuploadsAccessPoint:
    Properties:
      AccessPointTags:
      - Key: com.docker.compose.project
        Value: ctwp
      - Key: com.docker.compose.volume
        Value: ctwp-uploads
      - Key: Name
        Value: ctwp_ctwp-uploads
      FileSystemId: fs-0b44258924a44f472
    Type: AWS::EFS::AccessPoint
  CtwpuploadsNFSMountTargetOnSubnet058dfe49:
    Properties:
      FileSystemId: fs-0b44258924a44f472
      SecurityGroups:
      - Ref: DefaultNetwork
      SubnetId: subnet-058dfe49
    Type: AWS::EFS::MountTarget
  CtwpuploadsNFSMountTargetOnSubnet4249cc39:
    Properties:
      FileSystemId: fs-0b44258924a44f472
      SecurityGroups:
      - Ref: DefaultNetwork
      SubnetId: subnet-4249cc39
    Type: AWS::EFS::MountTarget
  CtwpuploadsNFSMountTargetOnSubnetf1585599:
    Properties:
      FileSystemId: fs-0b44258924a44f472
      SecurityGroups:
      - Ref: DefaultNetwork
      SubnetId: subnet-f1585599
    Type: AWS::EFS::MountTarget
  DbService:
    DependsOn:
    - DbdataNFSMountTargetOnSubnetf1585599
    - DbdataNFSMountTargetOnSubnet058dfe49
    - DbdataNFSMountTargetOnSubnet4249cc39
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: DefaultNetwork
          Subnets:
          - subnet-f1585599
          - subnet-058dfe49
          - subnet-4249cc39
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - DbServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: ctwp
      - Key: com.docker.compose.service
        Value: db
      TaskDefinition:
        Ref: DbTaskDefinition
    Type: AWS::ECS::Service
  DbServiceDiscoveryEntry:
    Properties:
      Description: '"db" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: db
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  DbTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - ap-south-1.compute.internal
        - ctwp.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: ctwp
        Name: Db_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Db_ResolvConf_InitContainer
        Environment:
        - Name: MYSQL_DATABASE
          Value: wordpress
        - Name: MYSQL_PASSWORD
        - Name: MYSQL_ROOT_PASSWORD
          Value: somewordpress
        - Name: MYSQL_USER
        Essential: true
        Image: docker.io/library/mysql:5.7@sha256:afc453de0d675083ac00d0538521f8a9a67d1cce180d70fab9925ebcc87a0eba
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: ctwp
        MountPoints:
        - ContainerPath: /var/lib/mysql
          SourceVolume: db_data
        Name: db
      Cpu: "256"
      ExecutionRoleArn:
        Ref: DbTaskExecutionRole
      Family: ctwp-db
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      TaskRoleArn:
        Ref: DbTaskRole
      Volumes:
      - EFSVolumeConfiguration:
          AuthorizationConfig:
            AccessPointId:
              Ref: DbdataAccessPoint
            IAM: ENABLED
          FilesystemId: fs-0025115cee05f326f
          TransitEncryption: ENABLED
        Name: db_data
    Type: AWS::ECS::TaskDefinition
  DbTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: ctwp
      - Key: com.docker.compose.service
        Value: db
    Type: AWS::IAM::Role
  DbTaskRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - elasticfilesystem:ClientMount
            - elasticfilesystem:ClientWrite
            - elasticfilesystem:ClientRootAccess
            Condition:
              StringEquals:
                elasticfilesystem:AccessPointArn:
                  Ref: DbdataAccessPoint
            Effect: Allow
            Principal: {}
            Resource:
            - arn:aws:elasticfilesystem:ap-south-1:354693883419:file-system/fs-0025115cee05f326f
          Version: 2012-10-17
        PolicyName: DbDbdataVolumeMountPolicy
      Tags:
      - Key: com.docker.compose.project
        Value: ctwp
      - Key: com.docker.compose.service
        Value: db
    Type: AWS::IAM::Role
  DbdataAccessPoint:
    Properties:
      AccessPointTags:
      - Key: com.docker.compose.project
        Value: ctwp
      - Key: com.docker.compose.volume
        Value: db_data
      - Key: Name
        Value: ctwp_db_data
      FileSystemId: fs-0025115cee05f326f
    Type: AWS::EFS::AccessPoint
  DbdataNFSMountTargetOnSubnet058dfe49:
    Properties:
      FileSystemId: fs-0025115cee05f326f
      SecurityGroups:
      - Ref: DefaultNetwork
      SubnetId: subnet-058dfe49
    Type: AWS::EFS::MountTarget
  DbdataNFSMountTargetOnSubnet4249cc39:
    Properties:
      FileSystemId: fs-0025115cee05f326f
      SecurityGroups:
      - Ref: DefaultNetwork
      SubnetId: subnet-4249cc39
    Type: AWS::EFS::MountTarget
  DbdataNFSMountTargetOnSubnetf1585599:
    Properties:
      FileSystemId: fs-0025115cee05f326f
      SecurityGroups:
      - Ref: DefaultNetwork
      SubnetId: subnet-f1585599
    Type: AWS::EFS::MountTarget
  Default80Ingress:
    Properties:
      CidrIp: 0.0.0.0/0
      Description: wordpress:80/tcp on default network
      FromPort: 80
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: TCP
      ToPort: 80
    Type: AWS::EC2::SecurityGroupIngress
  DefaultNetwork:
    Properties:
      GroupDescription: ctwp Security Group for default network
      Tags:
      - Key: com.docker.compose.project
        Value: ctwp
      - Key: com.docker.compose.network
        Value: ctwp_default
      VpcId: vpc-bdf410d6
    Type: AWS::EC2::SecurityGroup
  DefaultNetworkIngress:
    Properties:
      Description: Allow communication within network default
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Ref: DefaultNetwork
    Type: AWS::EC2::SecurityGroupIngress
  LoadBalancer:
    Properties:
      Scheme: internet-facing
      SecurityGroups:
      - Ref: DefaultNetwork
      Subnets:
      - subnet-f1585599
      - subnet-058dfe49
      - subnet-4249cc39
      Tags:
      - Key: com.docker.compose.project
        Value: ctwp
      Type: application
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  LogGroup:
    Properties:
      LogGroupName: /docker-compose/ctwp
    Type: AWS::Logs::LogGroup
  WordpressService:
    DependsOn:
    - WordpressTCP80Listener
    - DbService
    - CtwpuploadsNFSMountTargetOnSubnetf1585599
    - CtwpuploadsNFSMountTargetOnSubnet058dfe49
    - CtwpuploadsNFSMountTargetOnSubnet4249cc39
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
      - ContainerName: wordpress
        ContainerPort: 80
        TargetGroupArn:
          Ref: WordpressTCP80TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: DefaultNetwork
          Subnets:
          - subnet-f1585599
          - subnet-058dfe49
          - subnet-4249cc39
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - WordpressServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: ctwp
      - Key: com.docker.compose.service
        Value: wordpress
      TaskDefinition:
        Ref: WordpressTaskDefinition
    Type: AWS::ECS::Service
  WordpressServiceDiscoveryEntry:
    Properties:
      Description: '"wordpress" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: wordpress
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  WordpressTCP80Listener:
    Properties:
      DefaultActions:
      - ForwardConfig:
          TargetGroups:
          - TargetGroupArn:
              Ref: WordpressTCP80TargetGroup
        Type: forward
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 80
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  WordpressTCP80TargetGroup:
    Properties:
      Port: 80
      Protocol: HTTP
      Tags:
      - Key: com.docker.compose.project
        Value: ctwp
      TargetType: ip
      VpcId: vpc-bdf410d6
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  WordpressTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - ap-south-1.compute.internal
        - ctwp.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: ctwp
        Name: Wordpress_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Wordpress_ResolvConf_InitContainer
        Environment:
        - Name: WORDPRESS_DB_HOST
          Value: db
        - Name: WORDPRESS_DB_NAME
          Value: wordpress
        - Name: WORDPRESS_DB_PASSWORD
        - Name: WORDPRESS_DB_USER
        Essential: true
        Image: ghcr.io/akuma5157/ctwp:latest@sha256:1893d849c5b2178f02587d72dfa7d41acf7920f8038edb635b0686ec3e22b60d
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: ctwp
        MountPoints:
        - ContainerPath: /var/www/html/wp-uploads
          SourceVolume: ctwp-uploads
        Name: wordpress
        PortMappings:
        - ContainerPort: 80
          HostPort: 80
          Protocol: tcp
      Cpu: "256"
      ExecutionRoleArn:
        Ref: WordpressTaskExecutionRole
      Family: ctwp-wordpress
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      TaskRoleArn:
        Ref: WordpressTaskRole
      Volumes:
      - EFSVolumeConfiguration:
          AuthorizationConfig:
            AccessPointId:
              Ref: CtwpuploadsAccessPoint
            IAM: ENABLED
          FilesystemId: fs-0b44258924a44f472
          TransitEncryption: ENABLED
        Name: ctwp-uploads
    Type: AWS::ECS::TaskDefinition
  WordpressTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: ctwp
      - Key: com.docker.compose.service
        Value: wordpress
    Type: AWS::IAM::Role
  WordpressTaskRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - elasticfilesystem:ClientMount
            - elasticfilesystem:ClientWrite
            - elasticfilesystem:ClientRootAccess
            Condition:
              StringEquals:
                elasticfilesystem:AccessPointArn:
                  Ref: CtwpuploadsAccessPoint
            Effect: Allow
            Principal: {}
            Resource:
            - arn:aws:elasticfilesystem:ap-south-1:354693883419:file-system/fs-0b44258924a44f472
          Version: 2012-10-17
        PolicyName: WordpressCtwpuploadsVolumeMountPolicy
      Tags:
      - Key: com.docker.compose.project
        Value: ctwp
      - Key: com.docker.compose.service
        Value: wordpress
    Type: AWS::IAM::Role
